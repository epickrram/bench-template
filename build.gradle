/*
 * Copyright 2014 Mark Price
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'java'
apply plugin: 'idea'
defaultTasks 'build'

group = 'com.epickrram'
version = new Version(major: 0, revision: 1)

ext {
    fullName = 'Benchmark'
    fullDescription = 'Benchmark'
    teamName = ''
    siteUrl = 'https://github.com/epickrram'
    sourceUrl = ''

    javaCompilerExecutable = System.env['JAVA_HOME'] ? System.env['JAVA_HOME'] + '/bin/javac' : 'javac'

}

buildscript {
    repositories {
        maven{url 'http://jcenter.bintray.com'}
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'me.champeau.gradle:jmh-gradle-plugin:0.3.1'
    }
}

apply plugin: 'me.champeau.gradle.jmh'

repositories {
    mavenCentral()
    maven{url 'http://jcenter.bintray.com'}
}

dependencies {
    compile 'org.openjdk.jmh:jmh-core:1.17.2'
    jmh 'org.openjdk.jmh:jmh-core:1.17.2'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.17.2'
    compile 'org.openjdk.jol:jol-core:0.6'
    compile 'org.openjdk.jol:jol-cli:0.6'

}

jmh {
    jmhVersion = '1.17'
    duplicateClassesStrategy = 'warn'
    fork = 1
    benchmarkMode = ['avgt']
    timeUnit = 'ns'
    warmupIterations = 5
    iterations = 5
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
jar {
    manifest.attributes('Built-By': System.properties['user.name'],
                        'Bundle-Name': fullName,
                        'Bundle-Vendor': teamName,
                        'Bundle-Description': fullDescription,
                        'Bundle-DocURL': siteUrl)
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example',
                'Implementation-Version': version
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

artifacts {
    archives sourcesJar, javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

class Version {
    int major, minor = 0, revision = 0
    boolean snapshot
    String stage

    String toString() {
        "$major.$minor.$revision${stage ? '.' + stage : ''}${snapshot ? '-SNAPSHOT' : ''}"
    }
}
